import telebot
import dbworker
import os 
import shelve
import datetime
from datetime import datetime
import random
from telebot.types import LabeledPrice
from telebot import types
import urllib.request as urllib2
from flask import Flask, request
TOKEN = os.environ['token2']
bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)
user_dict = {}

class User:
    def __init__(self, start):
        self.start = start
        self.num = None
        self.name_lot = None
        self.price = None
        self.total_price = None
        self.pic = None
        self.number_ship = None
        self.time = None


def dobavki():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–Ω–∞–∑–∞–¥_–∏–Ω–ª–∞–π–Ω'),
               types.InlineKeyboardButton("–ö–æ—Ä–∏—Ü–∞", callback_data='–ö–æ—Ä–∏—Ü–∞'),
               types.InlineKeyboardButton("–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ 20 –º–ª +30 ‚ÇΩ", callback_data='–®–æ–∫–æ–ª–∞–¥'),
               types.InlineKeyboardButton("–õ–∏–º–æ–Ω 10 –≥—Ä +15 ‚ÇΩ", callback_data='–õ–∏–º–æ–Ω'),
               types.InlineKeyboardButton("–ú–æ–ª–æ–∫–æ 50 –≥—Ä", callback_data='–ú–æ–ª–æ–∫–æ'),
               types.InlineKeyboardButton("üõí –í –ö–æ—Ä–∑–∏–Ω—É", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
               )
    return markup




def catalog():
    keyboard = types.InlineKeyboardMarkup()
    switch_button1 = types.InlineKeyboardButton(text="–ö–æ—Ñ–µ", switch_inline_query_current_chat="–ö–æ—Ñ–µ")
    switch_button2 = types.InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç", switch_inline_query_current_chat="–î–µ—Å–µ—Ä—Ç")
    keyboard.add(switch_button1, switch_button2)
    return keyboard


def num_markup1():
    markup = types.InlineKeyboardMarkup()
    a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
    a2 = types.InlineKeyboardButton('1', callback_data='jr')
    a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
    a4 = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', switch_inline_query_current_chat="–ö–æ—Ñ–µ")
    a6 = types.InlineKeyboardButton("‚òï –î–æ–±–∞–≤–∫–∏", callback_data=u'–¥–æ–±–∞–≤–∫–∏')
    a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
    markup.add(a1, a2, a3)
    markup.add(a4, a5)
    markup.add(a6)
    return markup

def num_markup2(callback, num):
    markup = types.InlineKeyboardMarkup()
    a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
    a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
    a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
    a4 = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', switch_inline_query_current_chat="–ö–æ—Ñ–µ")
    a6 = types.InlineKeyboardButton("‚òï –î–æ–±–∞–≤–∫–∏", callback_data=u'–¥–æ–±–∞–≤–∫–∏')
    a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
    markup.add(a1, a2, a3)
    markup.add(a4, a5)
    markup.add(a6)
    return markup

def check_basket(chat_id, callback):
    chat_id = callback.from_user.id
    user = user_dict[chat_id]
    with shelve.open('user_db.py') as db:
        lst3 = list(db.keys())
        if list(filter(lambda y: str(chat_id) in y, lst3)) == []:
            bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=add_lot())
        else:
            l = []
            s = []
            r = []
            lst3 = list(db.keys())
            lst = list((filter(lambda x: str(chat_id) in x, lst3)))
            for dd in lst:
                a = db.get(dd)
                r.append(a)
            for line3 in r:
                line2 = ' '.join(line3[:3])
                lin = line3[2]
                s.append(float(lin))
                l.append(line2)
            total_price = sum(s)
            m = ' ‚ÇΩ\n\nüîπ '.join(l)
            user.total_price = total_price
            bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                      f'üîπ {m} ‚ÇΩ.\n\n'
                                      f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.', reply_markup=finish_markup())


@bot.message_handler(commands=['start', 'reset'])
def callback_inline(message):
    chat_id = message.from_user.id
    start = 'ok'
    user = User(start)
    user_dict[chat_id] = user
    user_markup1 = telebot.types.ReplyKeyboardMarkup(True, True)
    user_markup1.row('‚òï –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
    user_markup1.row('üìå –ê–∫—Ü–∏–∏', 'üì≤ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    name = message.from_user.first_name
    dbworker.set_state(str(message.chat.id), '1')
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –Ø –ö–æ—Ñ–µ-–±–æ—Ç!\n\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∫–æ—Ñ–µ!',
                     reply_markup=user_markup1)
    bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
                         reply_markup=catalog())


@bot.inline_handler(func=lambda query: True)
def inline_query(query):
    try:
        chat_id = query.from_user.id
        user = user_dict[chat_id]
        num = 1
        user.num = num
        dbworker.set_state(str(chat_id), '2')
        if query.query == '–ö–æ—Ñ–µ':
            r1 = types.InlineQueryResultArticle(
                id='1',
                thumb_url='https://2tea.pro/wp-content/uploads/2018/02/3-e1518513952423.jpg',
                title="–ê–º–µ—Ä–∏–∫–∞–Ω–æ",
                description='–¶–µ–Ω–∞ 70 ‚ÇΩ',
                input_message_content=types.InputTextMessageContent('–ê–º–µ—Ä–∏–∫–∞–Ω–æ\n\n–¶–µ–Ω–∞ 70 ‚ÇΩ'
                                                                    '[\xa0](https://2tea.pro/wp-content/uploads/2018/02/3-e1518513952423.jpg)',
                                                                    parse_mode="Markdown"),
                reply_markup=num_markup1()
            )
            r2 = types.InlineQueryResultArticle(
                id='2',
                thumb_url='http://faraon35.ru/uploads/—ç—Å–ø—Ä–µ—Å—Å–æ.jpeg',
                title="–≠—Å–ø—Ä–µ—Å—Å–æ",
                description='–¶–µ–Ω–∞ 80 ‚ÇΩ',
                input_message_content=types.InputTextMessageContent('–≠—Å–ø—Ä–µ—Å—Å–æ\n\n–¶–µ–Ω–∞ 80 ‚ÇΩ'
                                                                    '[\xa0](http://faraon35.ru/uploads/—ç—Å–ø—Ä–µ—Å—Å–æ.jpeg)',
                                                                    parse_mode="Markdown"),
                reply_markup=num_markup1()
            )
            bot.answer_inline_query(query.id, [r1, r2], cache_time=0)
        if query.query == '–∏–∑–º–µ–Ω–∏—Ç—å':
            with shelve.open('user_db.py') as db:
                r = []
                lst3 = list(db.keys())
                keys = list((filter(lambda x: str(query.from_user.id) in x, lst3)))
                for dd in keys:
                    a = list(db.get(dd))
                    default = a[3]
                    num = a[1]
                    markup = types.InlineKeyboardMarkup()
                    a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
                    a2 = types.InlineKeyboardButton(str(num[3:-3]), callback_data='jr')
                    a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
                    a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", switch_inline_query_current_chat="–ö–æ—Ñ–µ")
                    a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
                    a6 = types.InlineKeyboardButton("‚òï –î–æ–±–∞–≤–∫–∏", callback_data=u'–¥–æ–±–∞–≤–∫–∏')
                    a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
                    markup.add(a1, a2, a3)
                    markup.add(a4, a5)
                    markup.add(a6)
                    markup.add(a7)
                    input_content = types.InputTextMessageContent(message_text=f"{a[0]}\n\n–¶–µ–Ω–∞ {a[2]}"
                                                                               f"[\xa0]({a[3]})", parse_mode='Markdown')
                    r2 = types.InlineQueryResultArticle(id=a[0],
                                                        thumb_url=default, title=a[0],
                                                        description=f'{(a[1])[3:-3]} —à—Ç.\n{a[2]} ‚ÇΩ',
                                                        input_message_content=input_content, reply_markup=markup)
                    r.append(r2)
                dbworker.set_state(str(chat_id), 'change')
                bot.answer_inline_query(query.id, r, cache_time=0, is_personal=True)
    except Exception as e:
        print(e)



@bot.message_handler(func=lambda message: dbworker.get_current_state(str(message.chat.id)) == 'change')
def msg_apps(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        with shelve.open('user_db.py') as db:
            lst3 = list(db.keys())
            keys = list((filter(lambda x: str(message.from_user.id) in x, lst3)))
            for dd in keys:
                a = list(db.get(dd))
                if a[0] in message.text:
                    num = (a[1])[3:-3]
                    user.name_lot = a[0]
                    user.price = (float(a[2]))
                    user.num = int(num)
                    user.pic = a[3]
                else:
                    pass
        dbworker.set_state(str(chat_id), '1')
    except Exception as e:
        print(e)



@bot.message_handler(func=lambda message: dbworker.get_current_state(str(message.chat.id)) == '2')
def msg_apps(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        if '–ê–º–µ—Ä–∏–∫–∞–Ω–æ' in message.text:
            user.pic = 'https://2tea.pro/wp-content/uploads/2018/02/3-e1518513952423.jpg'
            user.name_lot = '–ê–º–µ—Ä–∏–∫–∞–Ω–æ'
            user.price = 70.0
        if '–≠—Å–ø—Ä–µ—Å—Å–æ' in message.text:
            user.pic = 'http://faraon35.ru/uploads/—ç—Å–ø—Ä–µ—Å—Å–æ.jpeg'
            user.name_lot = '–≠—Å–ø—Ä–µ—Å—Å–æ'
            user.price = 80.0
        dbworker.set_state(str(chat_id), '1')
    except Exception as e:
        print(e)



@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        if message.text == "‚òï –ö–∞—Ç–∞–ª–æ–≥":
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=catalog())
        if message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
            with shelve.open('user_db.py') as db:
                lst3 = list(db.keys())
                if list(filter(lambda y: str(chat_id) in y, lst3)) == []:
                    bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=add_lot())
                else:
                    l = []
                    s = []
                    r = []
                    lst3 = list(db.keys())  # –≤—Å–µ –∫–ª—é4–∏ –∏–∑ –¥–±
                    lst = list((filter(lambda x: str(chat_id) in x, lst3)))  # –Ω—É–∂–Ω—ã–π —é–∑–µ—Ä
                    for dd in lst:
                        a = db.get(dd)
                        r.append(a)
                    for line3 in r:
                        line2 = ' '.join(line3[:3])
                        lin = line3[2]
                        s.append(float(lin))
                        l.append(line2)
                    total_price = sum(s)
                    m = ' ‚ÇΩ\n\nüîπ '.join(l)
                    user.total_price = total_price
                    bot.send_message(chat_id,
                                 text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                      f'üîπ {m} ‚ÇΩ.\n\n'
                                      f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.',
                                 reply_markup=finish_markup())
    except Exception as e:
        print(e)


def gg_basket(callback):
    chat_id = callback.from_user.id
    user = user_dict[chat_id]
    with shelve.open('user_db.py') as db:
        db[str(chat_id) + ':' + user.name_lot] = [user.name_lot, '  |' + str(user.num) + '|  ', str(user.price * user.num), str(user.pic)]

def backbasket():
    markup = types.InlineKeyboardMarkup()
    a1 = types.InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥ –≤ –ö–æ—Ä–∑–∏–Ω—É', callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
    markup.add(a1)
    return markup

def finish_markup():
    markup = types.InlineKeyboardMarkup()
    a1 = types.InlineKeyboardButton("‚úî–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è", callback_data=u'–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è')
    a2 = types.InlineKeyboardButton("10 –º–∏–Ω.", callback_data='10 –º–∏–Ω.')
    a3 = types.InlineKeyboardButton("30 –º–∏–Ω.", callback_data=u'30 –º–∏–Ω.')
    a4 = types.InlineKeyboardButton("60 –º–∏–Ω.", callback_data=u'60 –º–∏–Ω.')
    a5 = types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", switch_inline_query_current_chat='–∏–∑–º–µ–Ω–∏—Ç—å')
    a55 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å')
    a6 = types.InlineKeyboardButton("‚ùé –û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å')
    a7 = types.InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å')
    markup.add(a1)
    markup.add(a2, a3, a4)
    markup.add(a5, a55)
    markup.add(a6, a7)
    return markup

def add_lot():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å'))
    return markup

def time2(callback):
    if callback.data == '–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è':
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("‚úî–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è", callback_data=u'–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è')
        a2 = types.InlineKeyboardButton("10 –º–∏–Ω.", callback_data='10 –º–∏–Ω.')
        a3 = types.InlineKeyboardButton("30 –º–∏–Ω.", callback_data=u'30 –º–∏–Ω.')
        a4 = types.InlineKeyboardButton("60 –º–∏–Ω.", callback_data=u'60 –º–∏–Ω.')
        a5 = types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", switch_inline_query_current_chat='–∏–∑–º–µ–Ω–∏—Ç—å')
        a55 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å')
        a6 = types.InlineKeyboardButton("‚ùé –û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å')
        a7 = types.InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å')
        markup.add(a1)
        markup.add(a2, a3, a4)
        markup.add(a5, a55)
        markup.add(a6, a7)
        return markup
    elif callback.data == '10 –º–∏–Ω.':
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è", callback_data=u'–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è')
        a2 = types.InlineKeyboardButton("‚úî10 –º–∏–Ω.", callback_data='10 –º–∏–Ω.')
        a3 = types.InlineKeyboardButton("30 –º–∏–Ω.", callback_data=u'30 –º–∏–Ω.')
        a4 = types.InlineKeyboardButton("60 –º–∏–Ω.", callback_data=u'60 –º–∏–Ω.')
        a5 = types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", switch_inline_query_current_chat='–∏–∑–º–µ–Ω–∏—Ç—å')
        a55 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å')
        a6 = types.InlineKeyboardButton("‚ùé –û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å')
        a7 = types.InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å')
        markup.add(a1)
        markup.add(a2, a3, a4)
        markup.add(a5, a55)
        markup.add(a6, a7)
        return markup
    elif callback.data == '30 –º–∏–Ω.':
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è", callback_data=u'–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è')
        a2 = types.InlineKeyboardButton("10 –º–∏–Ω.", callback_data='10 –º–∏–Ω.')
        a3 = types.InlineKeyboardButton("‚úî30 –º–∏–Ω.", callback_data=u'30 –º–∏–Ω.')
        a4 = types.InlineKeyboardButton("60 –º–∏–Ω.", callback_data=u'60 –º–∏–Ω.')
        a5 = types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", switch_inline_query_current_chat='–∏–∑–º–µ–Ω–∏—Ç—å')
        a55 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å')
        a6 = types.InlineKeyboardButton("‚ùé –û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å')
        a7 = types.InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å')
        markup.add(a1)
        markup.add(a2, a3, a4)
        markup.add(a5, a55)
        markup.add(a6, a7)
        return markup
    elif callback.data == '60 –º–∏–Ω.':
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è", callback_data=u'–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è')
        a2 = types.InlineKeyboardButton("10 –º–∏–Ω.", callback_data='10 –º–∏–Ω.')
        a3 = types.InlineKeyboardButton("30 –º–∏–Ω.", callback_data=u'30 –º–∏–Ω.')
        a4 = types.InlineKeyboardButton("‚úî60 –º–∏–Ω.", callback_data=u'60 –º–∏–Ω.')
        a5 = types.InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å", switch_inline_query_current_chat='–∏–∑–º–µ–Ω–∏—Ç—å')
        a55 = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å')
        a6 = types.InlineKeyboardButton("‚ùé –û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å')
        a7 = types.InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å')
        markup.add(a1)
        markup.add(a2, a3, a4)
        markup.add(a5, a55)
        markup.add(a6, a7)
        return markup


@bot.callback_query_handler(func=lambda callback: True)
def callback_inline(callback):
    try:
        if callback:
            chat_id = callback.from_user.id
            user = user_dict[chat_id]
            num = user.num
            if callback.data == '+1':
                num += 1
                markup = types.InlineKeyboardMarkup()
                a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
                a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
                a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
                a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", switch_inline_query_current_chat="–ö–æ—Ñ–µ")
                a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
                a6 = types.InlineKeyboardButton("‚òï –î–æ–±–∞–≤–∫–∏", callback_data=u'–¥–æ–±–∞–≤–∫–∏')
                a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
                markup.add(a1, a2, a3)
                markup.add(a4, a5)
                markup.add(a6)
                markup.add(a7)
                bot.edit_message_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=markup)
                user.num = num
            if callback.data == '-1':
                num -= 1
                if num < 1:
                    num = 1
                markup = types.InlineKeyboardMarkup()
                a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
                a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
                a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
                a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", switch_inline_query_current_chat="–ö–æ—Ñ–µ")
                a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
                a6 = types.InlineKeyboardButton("‚òï –î–æ–±–∞–≤–∫–∏", callback_data=u'–¥–æ–±–∞–≤–∫–∏')
                a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
                markup.add(a1, a2, a3)
                markup.add(a4, a5)
                markup.add(a6)
                markup.add(a7)
                bot.edit_message_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=markup)
                user.num = num
            if callback.data == "–∫–æ—Ä–∑–∏–Ω–∞":
                gg_basket(callback)
                with shelve.open('user_db.py') as db:
                    l = []
                    s = []
                    r = []
                    lst3 = list(db.keys()) #–≤—Å–µ –∫–ª—é4–∏ –∏–∑ –¥–±
                    lst = list((filter(lambda x: str(chat_id) in x, lst3))) #–Ω—É–∂–Ω—ã–π —é–∑–µ—Ä
                    for dd in lst:
                        a = db.get(dd)
                        r.append(a)
                    for line3 in r:
                        line2 = ' '.join(line3[:3])
                        lin = line3[2]
                        s.append(float(lin))
                        l.append(line2)
                    total_price = sum(s)
                    m = ' ‚ÇΩ\n\nüîπ '.join(l)
                    user.total_price = total_price
                bot.edit_message_text(inline_message_id=callback.inline_message_id, text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É')
                bot.send_message(chat_id,
                                 text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                            f'üîπ {m} ‚ÇΩ.\n\n'
                                            f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.',
                                      reply_markup=finish_markup())
            if callback.data == '—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é':
                bot.edit_message_text(inline_message_id=callback.inline_message_id, text='–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
                check_basket(chat_id, callback)
                with shelve.open('user_db.py') as db:
                    del db[str(chat_id) + ':' + user.name_lot]
            if callback.data == '–æ—á–∏—Å—Ç–∏—Ç—å':
                with shelve.open('user_db.py') as db:
                    lst3 = list(db.keys())
                    lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                    for dd in lst:
                        del db[dd]
                bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!', reply_markup=add_lot())
            if callback.data == '–¥–æ–±–∞–≤–∏—Ç—å':
                bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=catalog())
            if callback.data == '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ':
                bot.send_message(-1001302729558, f'–ó–∞–∫–∞–∑ –Ω–æ–º–µ—Ä: #{user.number_ship}\n\n')
                bot.answer_callback_query(callback.id, "–í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è!")
            if callback.data == '–¥–æ–±–∞–≤–∫–∏':
                bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                          text='–î–æ–±–∞–≤–∫–∏ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤..\n(–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)',
                                          reply_markup=dobavki())
            if callback.data == '–Ω–∞–∑–∞–¥_–∏–Ω–ª–∞–π–Ω':
                markup = num_markup2(callback, num)
                bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                      text=f"{user.name_lot}\n\n–¶–µ–Ω–∞ {user.price}"
                                            f"[\xa0]({user.pic})", parse_mode='Markdown', reply_markup=markup)
            if callback.data == '–æ—Ñ–æ—Ä–º–∏—Ç—å':
                with shelve.open('user_db.py') as db:
                    r = []
                    lst3 = list(db.keys()) #–≤—Å–µ –∫–ª—é4–∏ –∏–∑ –¥–±
                    lst = list((filter(lambda x: str(chat_id) in x, lst3))) #–Ω—É–∂–Ω—ã–π —é–∑–µ—Ä
                    for dd in lst:
                        a = list(db.get(dd))
                        r.append(f'- {a[0]} {(a[1])[3:-3]} —à—Ç.')
                    m = '\n'.join(r)
                price = str(user.total_price)
                price1 = user.total_price * 100
                prices = [LabeledPrice(label=f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ', amount=int(price1))]
                user.number_ship = str(random_pool())
                title = f'–ó–∞–∫–∞–∑: {user.number_ship}'
                if price1 > 6569.0:
                    bot.send_invoice(callback.from_user.id, provider_token='381764678:TEST:5508',
                                     start_parameter='true',
                                     title=title,
                                     description=f'\n{m}',
                                     invoice_payload='test',
                                     currency='RUB',
                                     prices=prices,
                                     need_phone_number=True,
                                     photo_url='http://www.tobystevens.co.uk/wp-content/uploads/2012/04/7.-SAMSUNG_COFFEE_CAFE_LOGO_GRAPHIC.jpg',
                                     photo_height=512,
                                     photo_width=512,
                                     photo_size=512,
                                     )
                else:
                    bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                          text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –º–µ–Ω–µ–µ 1$\n'
                                               f'–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {price} ‚ÇΩ\n'
                                               f'–î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∑–∏—Ü–∏–∏..',
                                          reply_markup=add_lot())
            if "–ë–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è" or '–º–∏–Ω.' in callback.data:
                markup = time2(callback)
                user.time = callback.data
                bot.edit_message_reply_markup(callback.from_user.id, callback.message.message_id, reply_markup=markup)
    except Exception as e:
        print(e)


@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query):
    bot.answer_shipping_query(shipping_query.id, ok=True, shipping_options=False,
                              error_message='Oh, —à—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ!')

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π"
                                                " –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –ø–æ–∑–∂–µ.")


def common():
    markup = types.InlineKeyboardMarkup()
    a1 = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ", callback_data=u'–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
    markup.add(a1)
    return markup

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    with shelve.open('user_db.py') as db:
        l = []
        r = []
        lst3 = list(db.keys())
        lst = list((filter(lambda x: str(chat_id) in x, lst3))) #—Ñ–∏–ª—å—Ç—Ä –Ω–∞ —é–∑–µ—Ä–∞
        for dd in lst:
            a = db.get(dd)
            r.append(a)
        for line3 in r:
            line2 = ' '.join(line3[:3])
            l.append(line2)
        m = '‚ÇΩ\n\n‚ûï '.join(l)
    from_chat_id = -1001302729558
    now = datetime.now()
    today = datetime.today().strftime('%H:%M')
    time_order = f"{now.year}-{now.month}-{now.day}  {today}"
    type_pay = '–ë–∞–Ω–∫. –∫–∞—Ä—Ç–∞'
    name = f'{message.from_user.first_name} {message.from_user.last_name} @{message.from_user.username}'
    bot.send_message(message.from_user.id, f'–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..\n\n‚ûï {m} ‚ÇΩ\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - {user.number_ship}',
                     reply_markup=common())
    bot.send_message(from_chat_id, f'‚ûï {m} ‚ÇΩ\n'
                                   f'___________________________\n\n'
                                   f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - #{user.number_ship}\n'
                                   f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {time_order}\n'
                                   f'–ó–∞–∫–∞–∑—á–∏–∫: {name}\n'
                                   f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {type_pay}\n\n'
                                   f'–ò—Ç–æ–≥–æ: {str(user.total_price)} ‚ÇΩ.'
                     )

    with shelve.open('user_db.py') as db:
        lst3 = list(db.keys())
        lst = list((filter(lambda x: str(chat_id) in x, lst3)))
        for dd in lst:
            del db[dd]


def random_pool():
    a = random.randint(999, 9999)
    return a




@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://cofe-testbot-1996.herokuapp.com/' + TOKEN)
    return "!", 200


if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
