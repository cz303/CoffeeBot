# -*- coding: utf-8 -*-
#coding: utf-8
import telebot
from telebot.types import LabeledPrice
from telebot import types
import shelve
import random
import datetime
from datetime import datetime
import urllib
import urllib.request as urllib2
import os
from urllib.parse import urlparse
from PyPDF2 import PdfFileReader
import os.path
import xlrd
import pandas as pd
from docx import Document
import zipfile
from pptx import Presentation
from bs4 import BeautifulSoup
from flask import Flask, request
TOKEN = os.environ['token']
bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

user_dict = {}

class User:
    def __init__(self, start):
        self.start = start
        self.type_print = None
        self.num = None
        self.link = None
        self.file_id = None
        self.file_name = None
        self.apps = None
        self.num_page = None
        self.total_price = None
        self.price_print = None

def main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(types.InlineKeyboardButton("–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)", callback_data='1–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)'),
               types.InlineKeyboardButton("–¶–≤–µ—Ç–Ω–∞—è –ü–µ—á–∞—Ç—å –ê4", callback_data='1–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –ê4'),
               types.InlineKeyboardButton("–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15", callback_data='1–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15'))
    return markup

def inline_markup():
    markup = types.InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(types.InlineKeyboardButton("–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)", callback_data='–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)'),
               types.InlineKeyboardButton("–¶–≤–µ—Ç–Ω–∞—è –ü–µ—á–∞—Ç—å –ê4", callback_data='–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –ê4'),
               types.InlineKeyboardButton("–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15", callback_data='–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15'))
    return markup

def inline_markup2():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='–¥–æ–±–∞–≤–∏—Ç—å'))
    return markup

def clear_basket():
    user_markup1 = telebot.types.ReplyKeyboardMarkup(True, False)
    user_markup1.row('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)')
    user_markup1.row('–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15')
    user_markup1.row('–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    return clear_basket()


def num_copy_markup1():
    markup = types.InlineKeyboardMarkup()
    a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
    a2 = types.InlineKeyboardButton('1', callback_data='jr')
    a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
    a4 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
    a5 = types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
    markup.add(a1, a2, a3)
    markup.add(a4, a5)
    return markup

def gen_markup1():
    markup = types.InlineKeyboardMarkup(True)
    markup.row_width = 2
    markup.add(types.InlineKeyboardButton("C–µ–π—á–∞—Å –≤ Telegram", callback_data='now'),
               types.InlineKeyboardButton("–ü–æ —Ñ–∞–∫—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è", callback_data='later'),
               types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='–∫–æ—Ä–∑–∏–Ω–∞'))
    return markup



def gen_markup2():
    markup = types.InlineKeyboardMarkup(True)
    markup.row_width = 2
    markup.add(types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å'),
               types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='–¥–æ–±–∞–≤–∏—Ç—å'),
               types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å'),
               types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='–Ω–∞–∑–∞–¥')
               )
    return markup


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_markup1 = telebot.types.ReplyKeyboardMarkup(True, True)
    user_markup1.row('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ö–æ—Ä–∑–∏–Ω–∞')
    user_markup1.row('–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    name = message.from_user.first_name
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –Ø –ö–æ–ø–∏—Ä-–∫–æ—Ç!\n\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n- —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∏'
                                      f' –ê4;\n- –∫–æ–ø–∏–∏ –ê4;\n- –∫—É–ø–∏—Ç—å –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é.\n\n–ó–∞—Ö–æ–¥–∏ –≤ –¢–¶ –ê–í–ï–ù–Æ –Ω–∞ 4 —ç—Ç–∞–∂!', reply_markup=user_markup1)

  
                                      
@bot.message_handler(content_types=['text', 'document'])
def msg_hand(message):
    try:
        chat_id = message.chat.id
        start = 'ok'
        user = User(start)
        user_dict[chat_id] = user
        num = 1
        user.num = num
        if message.content_type == 'document':
            if user.type_print == None:
                file_id = message.document.file_id
                user.file_id = file_id
                file_info = bot.get_file(file_id)
                link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'
                user.link = link
                file_name = message.document.file_name
                user.file_name = file_name
                if file_name.endswith('.ppt') or file_name.endswith('.doc') or file_name.endswith('.xls'):
                    bot.send_message(message.from_user.id, '–¢–∞–∫–∏–µ —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã - –Ω–µ —Å–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö'
                                     '—Å—Ç–æ–∏–º–æ—Å—Ç—å!\n–ü–µ—Ä–µ—à–ª—é –±–µ–∑ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞!\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                     'pdf, docx, pptx, xlsx\nfrw, cdw, dwg\npng, jpeg')
                else:
                    bot.send_message(message.chat.id, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                     'pdf, docx, pptx, xlsx\nfrw, cdw, dwg\npng, jpeg'
                                     '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=inline_markup())
            else:
                bot.send_message(chat_id, text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=num_copy_markup1())
        if 'https' in message.text:
            if user.type_print == None:
                url = message.text
                result = urllib.request.urlopen(url)
                file_name = os.path.basename(urllib.parse.urlparse(result.url).path)
                user.file_name = file_name
                user.link = url
                bot.send_message(message.chat.id, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                     'pdf, docx, pptx, xlsx\nfrw, cdw, dwg\npng, jpeg'
                                 '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=inline_markup())
            else:
                bot.send_message(chat_id, text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=num_copy_markup1())
        if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            bot.send_message(message.chat.id, '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                     'pdf, docx, pptx, xlsx\nfrw, cdw, dwg\npng, jpeg'
                             '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=main_menu())
        if message.text == '–ö–æ—Ä–∑–∏–Ω–∞':
            with shelve.open('itog') as db:
                lst3 = list(db.keys())
                if list(filter(lambda y: str(chat_id) in y, lst3)) == []:
                    bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=inline_markup2())
                else:
                    l = []
                    s = []
                    r = []
                    lst3 = list(db.keys())
                    lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                    for dd in lst:
                        a = db.get(dd)
                        r.append(a)
                    for line3 in r:
                        line2 = ' '.join(line3[:5])
                        lin = line3[4]
                        s.append(float(lin))
                        l.append(line2)
                    total_price = sum(s)
                    m = ' ‚ÇΩ\n\nüíæ '.join(l)
                    user.total_price = total_price
                    bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                                 f'üíæ {m} ‚ÇΩ.\n\n'
                                                   f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.', reply_markup=gen_markup2())
    except Exception as e:
        print(e)
        
def gg_basket(callback):
    chat_id = callback.from_user.id
    user = user_dict[chat_id]
    with shelve.open('itog') as db:
        db[str(chat_id) + ':' + user.file_name] = [user.file_name, f'({user.type_print})', (str(user.num) + ' —ç–∫–∑.'),
            (str(user.num_page) + ' —Å—Ç—Ä.'),
            (str(user.num_page * user.num * user.price_print)),
            ('\n\n' + user.link + '\n\n')]
 
def callduty(price_print, callback):
    type_print = callback.data
    user.price_print = price_print
    user.type_print = type_print
        
@bot.callback_query_handler(func=lambda call: call == '+1' or '-1')
def callback_query_handler(callback):
    if callback.message:
        chat_id = callback.from_user.id
        user = user_dict[chat_id]
        num = user.num
        if callback.data == '1–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15':
            price_print = 10.0
            callduty(price_print, callback)
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                  text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å")
        if callback.data == '1–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –ê4':
            price_print = 20.0
            callduty(price_print, callback)
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                  text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å")
        if callback.data == '1–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)':
            price_print = 2.5
            callduty(price_print, callback)
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                  text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å")
        if callback.data == '+1':
            num += 1
            markup = types.InlineKeyboardMarkup()
            a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
            a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
            a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
            a4 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
            a5 = types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
            markup.add(a1, a2, a3)
            markup.add(a4, a5)
            bot.edit_message_reply_markup(callback.from_user.id, callback.message.message_id, reply_markup=markup)
            user.num = num
        if callback.data == '-1':
            num -= 1
            if num < 1:
                num = 1
            markup = types.InlineKeyboardMarkup()
            a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
            a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
            a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
            a4 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
            a5 = types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
            markup.add(a1, a2, a3)
            markup.add(a4, a5)
            user.num = num
            bot.edit_message_reply_markup(callback.from_user.id, callback.message.message_id, reply_markup=markup)
        if callback.data == '–Ω–∞–∑–∞–¥1':
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=inline_markup())
        if callback.data == '–∫–æ—Ä–∑–∏–Ω–∞':
            file_name = user.file_name
            url = user.link
            urllib2.urlretrieve(url, file_name)
            if '.docx' in file_name:
                document = Document(file_name)
                document.save(f'{file_name}1.docx')
                document.save(f'{file_name}1.zip')
                zf = zipfile.ZipFile(f'{file_name}1.zip')
                f = zf.open('docProps/app.xml').read()
                soup = BeautifulSoup(f, 'xml')
                num_page = soup.find('Pages').next_element
                user.num_page = int(num_page)
                gg_basket(callback) 
            if '.pdf' in file_name:
                input1 = PdfFileReader(open(file_name, "rb"))
                num_page = input1.getNumPages()
                user.num_page = int(num_page)
                gg_basket(callback)
            if '.frw' or '.cdw' or '.png' or '.jpeg' or '.dwg':
                user.num_page = 1
                gg_basket(callback)
            if '.pptx' in file_name:
                filename = os.path.abspath('1111.pptx')
                np = Presentation(filename)
                num_page = len(np.slides)
                user.num_page = int(num_page)
                gg_basket(callback)
            if '.xlsx' in file_name:
                xl = pd.ExcelFile(os.path.abspath(file_name))
                num_page = len(xl.sheet_names)
                user.num_page = int(num_page)
                gg_basket(callback)
            with shelve.open('itog') as db:
                l = []
                s = []
                r = []
                lst3 = list(db.keys())
                lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                for dd in lst:
                    a = db.get(dd)
                    r.append(a)
                for line3 in r:
                    line2 = ' '.join(line3[:5])
                    lin = line3[4]
                    s.append(float(lin))
                    l.append(line2)
                total_price = sum(s)
                m = ' ‚ÇΩ\n\nüíæ '.join(l)
                user.total_price = total_price
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                                   f'üíæ {m} ‚ÇΩ.\n\n'
                                                   f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.', reply_markup=gen_markup2())
            #bot.send_message(callback.from_user.id, '–ò–¥—ë–º –¥–∞–ª—å—à–µ! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–∫–∞–∑—É ..')
        if callback.data == '–æ—Ñ–æ—Ä–º–∏—Ç—å':
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã ..', reply_markup=gen_markup1())
        if callback.data == '–æ—á–∏—Å—Ç–∏—Ç—å':
            with shelve.open('itog') as db:
                lst3 = list(db.keys())
                lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                for dd in lst:
                    del db[dd]
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!', reply_markup=inline_markup2())
        if callback.data == '–¥–æ–±–∞–≤–∏—Ç—å':
            num = 1
            user.num = num
            bot.send_message(callback.from_user.id,
                                   "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å")
        if callback.data == '–Ω–∞–∑–∞–¥':
            markup = types.InlineKeyboardMarkup()
            a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
            a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
            a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
            a4 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
            a5 = types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
            markup.add(a1, a2, a3)
            markup.add(a4, a5)
            bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                  text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
        if callback.data == '–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)':  
            price_print = 2.5
            callduty(price_print, callback)
            bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                  text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π', reply_markup=num_copy_markup1())
        if callback.data == '–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15':
            price_print = 10.0
            callduty(price_print, callback)
            bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                  text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π', reply_markup=num_copy_markup1())
        if callback.data == '–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –ê4':
            price_print = 20.0
            callduty(price_print, callback)
            bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                  text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π', reply_markup=num_copy_markup1())

        if callback.data == "later":
            number = str(random_pool())
            bot.answer_callback_query(callback.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ - –ü–æ —Ñ–∞–∫—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è")
            bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                  text='–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - ' + number)
            bot.send_message(callback.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=main_menu())
        

            with shelve.open('itog') as db:
                l = []
                for line3 in db.values():
                    line2 = ' '.join(line3)
                    l.append(line2)
                m = '\n'.join(l)


            from_chat_id = -1001302729558
            now = datetime.now()
            time_order = str(f"{now.year}-{now.month}-{now.day}  {now.hour}:{now.minute}")
            type_pay = '–ü–æ —Ñ–∞–∫—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è'
            name = callback.from_user.first_name + ' ' + callback.from_user.last_name + ' @' + callback.from_user.username
            bot.send_message(from_chat_id, f'{m}'
                                           f'______________________________\n\n'
                                           f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {number}\n'
                                           f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {time_order}\n'
                                           f'–ó–∞–∫–∞–∑—á–∏–∫: {name}\n'
                                           f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {type_pay}\n\n'
                                           f'–ò—Ç–æ–≥–æ: {str(user.total_price)} —Ä—É–±.'
                             )
            with shelve.open('itog') as db:
                lst3 = list(db.keys())
                lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                for dd in lst:
                    del db[dd]
        if callback.data == "now":
            bot.answer_callback_query(callback.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ - C–µ–π—á–∞—Å –≤ Telegram")
            price = str(user.total_price)
            price1 = user.total_price * 100
            print(price1)
            prices = [LabeledPrice(label=f'–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: ', amount=int(price1))]
            title = user.type_print
            if price1 > 6569.0:
                bot.send_invoice(callback.from_user.id, provider_token='381764678:TEST:7231',
                             start_parameter='true',
                             title=title,
                             description=f'–¢–∏–ø —É—Å–ª—É–≥–∏: {title}\n–¶–µ–Ω–∞ {price} ‚ÇΩ',
                             invoice_payload='test',
                             currency='RUB',
                             prices=prices,
                             need_phone_number=True,
                             photo_url='https://pp.userapi.com/c845218/v845218058/cd929/DMHxsJvNO6s.jpg',
                             photo_height=512,
                             photo_width=512,
                             photo_size=512,
                             )
            else:
                bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                  text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Telegram –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ –º–µ–Ω–µ–µ 1$\n'
                                        f'–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {price} ‚ÇΩ\n'
                                        f'–û–¥–Ω–∞–∫–æ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ —Ñ–∞–∫—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è', reply_markup=gen_markup2())





@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query):
    print(shipping_query)
    bot.answer_shipping_query(shipping_query.id, ok=True, shipping_options=False,
                              error_message='Oh, —à—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ!')

@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π"
                                                " –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –ø–æ–∑–∂–µ.")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    number = str(random_pool())
    bot.send_message(message.from_user.id, '–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - ' + number)
    with shelve.open('itog') as db:
        l = []
        for line3 in db.values():
            line2 = ' '.join(line3)
            l.append(line2)
        m = '\n'.join(l)
    from_chat_id = -1001302729558
    now = datetime.now()
    time_order = str(f"{now.year}-{now.month}-{now.day}  {now.hour}:{now.minute}")
    type_pay = '–ù–∞–ª–∏—á–Ω—ã–µ'
    name = message.from_user.first_name + ' ' + message.from_user.last_name + ' @' + message.from_user.username
    bot.send_message(from_chat_id, f'{m}'
                                   f'___________________________\n\n'
                                   f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {number}\n'
                                   f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {time_order}\n'
                                   f'–ó–∞–∫–∞–∑—á–∏–∫: {name}\n'
                                   f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {type_pay}\n\n'
                                   f'–ò—Ç–æ–≥–æ: {str(user.total_price)} ‚ÇΩ.'
                     )

    with shelve.open('itog') as db:
        lst3 = list(db.keys())
        lst = list((filter(lambda x: str(chat_id) in x, lst3)))
        for dd in lst:
            del db[dd]


def random_pool():
    a = random.randint(999, 9999)
    return a



@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://flask-est-1996.herokuapp.com/' + TOKEN)
    return "!", 200


if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
