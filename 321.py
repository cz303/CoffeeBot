# -*- coding: utf-8 -*-
# coding: utf-8
import dbworker, telebot, shelve, random, datetime, urllib, os
from kanc import dict2, dict_price
from telebot.types import LabeledPrice
from telebot import types
from datetime import datetime
import urllib.request as urllib2
from urllib.parse import urlparse
from PyPDF2 import PdfFileReader
import os.path
import xlrd
import pandas as pd
from docx import Document
import zipfile
from pptx import Presentation
from bs4 import BeautifulSoup
from flask import Flask, request

TOKEN = os.environ['token']
bot = telebot.TeleBot(TOKEN)
server = Flask(__name__)

user_dict = {}


class User:
    def __init__(self, start):
        self.start = start
        self.type_print = None
        self.num = None
        self.link = None
        self.file_id = None
        self.file_name = None
        self.apps = None
        self.num_page = None
        self.total_price = None
        self.price_print = None
        self.info_user = None
        self.message_id = None


class Markup():
    def __init__(self, start_func):
        self.start_func = start_func


    def inline_markup(self):
        markup = types.InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(types.InlineKeyboardButton("–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)", callback_data='–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)'),
                   types.InlineKeyboardButton("–¶–≤–µ—Ç–Ω–∞—è –ü–µ—á–∞—Ç—å –ê4", callback_data='–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –ê4'),
                   types.InlineKeyboardButton("–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15", callback_data='–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15'),
                   types.InlineKeyboardButton('–ê4 –ß/–ë –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è', callback_data='–ê4 –ß/–ë –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'),
                    types.InlineKeyboardButton("–ü–µ—á–∞—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–±—É–º–∞–≥–µ –ê4 (–≥–ª—è–Ω–µ—Ü, –º–∞—Ç–æ–≤–∞—è)", callback_data='–ü–µ—á–∞—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–±—É–º–∞–≥–µ')
                   )
        return markup


    def inline_markup2(self):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data='–¥–æ–±–∞–≤–∏—Ç—å'))
        return markup


    def num_copy_markup1(self):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton('1', callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        markup.add(a7)
        return markup

    def num_copy_markup3(self):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton('1', callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–ù–∞–∑–∞–¥–í–∫–∞–Ω—Ü')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        markup.add(a7)
        return markup


    def num_copy_markup2(self, callback, num):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        markup.add(a7)
        return markup

    def clear_basket(self, chat_id):
        with shelve.open('itog.py') as db:
            lst3 = list(db.keys())
            lst = list((filter(lambda x: str(chat_id) in x, lst3)))
            for dd in lst:
                del db[dd]


    def gen_markup1(self, chat_id, total_price):
        markup = types.InlineKeyboardMarkup(True)
        #a1 = types.InlineKeyboardButton("C–µ–π—á–∞—Å –≤ Telegram", callback_data='now')
        a2 = types.InlineKeyboardButton("–û–ø–ª–∞—Ça –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data='later')
        a3 = types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏", url=f'https://money.yandex.ru/transfer?receiver=410014990574641&sum={total_price}&success'
                                        f'URL=&quickpay-back-url=https://t.me/copykotbot&shop-host=&label={chat_id}&'
                                        'targets=–ö–æ–ø–∏—Ä-–∫–æ—Ç—É&comment=&origin=form&selectedPaymentType=pc&destination='
                                        'Donate&form-comment=Donate&short-dest=&quickpay-form=shop')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
        markup.add(a2)
        markup.add(a3)
        markup.add(a4)
        return markup


    def go_basket(self):
        markup = types.InlineKeyboardMarkup(True)
        markup.add(types.InlineKeyboardButton("üõí –í –∫–æ—Ä–∑–∏–Ω—É", callback_data='–∫–æ—Ä–∑–∏–Ω–∞'),
                   types.InlineKeyboardButton("üîÉ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ ", callback_data='–ø—Ä–∏–º–µ—á–∞–Ω–∏—è'),
                   types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–Ω–∞–∑–∞–¥')
                   )
        return markup


    def back(self):
        markup = types.InlineKeyboardMarkup(True)
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–Ω–∞–∑–∞–¥')
                   )
        return markup

    def gen_markup2(self):
        markup = types.InlineKeyboardMarkup(True)
        markup.row_width = 2
        markup.add(types.InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data='–æ—Ñ–æ—Ä–º–∏—Ç—å'),
                   types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='–¥–æ–±–∞–≤–∏—Ç—å'),
                   types.InlineKeyboardButton("‚ùé –û—á–∏—Å—Ç–∏—Ç—å", callback_data='–æ—á–∏—Å—Ç–∏—Ç—å'),
                   types.InlineKeyboardButton("üîÉ –ò–∑–º–µ–Ω–∏—Ç—å", switch_inline_query_current_chat='–ò–∑–º–µ–Ω–∏—Ç—å')
                   )
        return markup

    def kancel(self):
        markup = types.InlineKeyboardMarkup(True)
        markup.row_width = 2
        markup.add(types.InlineKeyboardButton("‚úè –†—É—á–∫–∏/–ö–∞—Ä–∞–Ω–¥–∞—à–∏", switch_inline_query_current_chat='–†—É—á–∫–∏/–ö–∞—Ä–∞–Ω–¥–∞—à–∏'),
                   types.InlineKeyboardButton("üìÅ –ü–∞–ø–∫–∏ –∏ –§–∞–π–ª—ã", switch_inline_query_current_chat='–ü–∞–ø–∫–∏ –∏ –§–∞–π–ª—ã'),
                   types.InlineKeyboardButton("üóí –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞", switch_inline_query_current_chat='–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞')
                   )
        return markup

    def klava(self, query, num):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        markup.add(a7)
        return markup

    def random_pool(self):
        a = random.randint(999, 9999)
        return a


    def check_basket(self, chat_id, callback):
        chat_id = callback.from_user.id
        user = user_dict[chat_id]
        with shelve.open('itog.py') as db:
            lst3 = list(db.keys())
            if list(filter(lambda y: str(chat_id) in y, lst3)) == []:
                bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!', reply_markup=mark_up.inline_markup2())
            else:
                l = []
                s = []
                r = []
                lst3 = list(db.keys())
                lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                for dd in lst:
                    a = db.get(dd)
                    r.append(a)
                for line3 in r:
                    line2 = ' '.join(line3[:5])
                    lin = line3[4]
                    s.append(float(lin))
                    l.append(line2)
                total_price = sum(s)
                m = ' ‚ÇΩ\n\nüíæ '.join(l)
                user.total_price = total_price
                bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                          f'üíæ {m} ‚ÇΩ.\n\n'
                                          f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.', reply_markup=mark_up.gen_markup2())

    def result_ship(self, chat_id, int):
        with shelve.open('itog.py') as db:
            l = []
            r = []
            t = []
            lst3 = list(db.keys())
            lst = list((filter(lambda x: str(chat_id) in x, lst3)))  # —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —é–∑–µ—Ä–∞
            for dd in lst:
                a = db.get(dd)
                r.append(a)
            for line3 in r:
                line1 = ' '.join(line3[:5])
                line2 = ' '.join(line3)
                l.append(line2)
                t.append(line1)
            m = '\n'.join(l)
            j = ' ‚ÇΩ\n\nüíæ '.join(t)
            if int == 1:
                return j
            else:
                return m



    def gg_basket(self, callback):
        chat_id = callback.from_user.id
        user = user_dict[chat_id]
        with shelve.open('itog.py') as db:
            db[str(chat_id) + ':' + user.file_name] = [user.file_name, f' ({user.type_print}) ',
                                                       (str(user.num) + ' —ç–∫–∑.'),
                                                       (str(user.num_page) + ' —Å—Ç—Ä.'),
                                                       (str(user.num_page * user.num * user.price_print)),
                                                       ('\n\n' + str(user.link) + '\n\n'),
                                                       ('–ü—Ä–∏–º.\n' + str(user.apps) + '\n\n')]

    def add_kancel(self, callback):
        chat_id = callback.from_user.id
        user = user_dict[chat_id]
        with shelve.open('itog.py') as db:
            db[str(chat_id) + ':' + user.file_name] = [user.file_name, f'{user.type_print}', (str(user.num) + ' —ç–∫–∑.'),
                                                       ' - ',
                                                       (str(user.num * user.price_print)),
                                                       ('\n\n' + str(user.link) + '\n\n'),
                                                       ('–ü—Ä–∏–º.\n' + str(user.apps) + '\n\n')]

    def callduty(self, price_print, callback):
        chat_id = callback.from_user.id
        user = user_dict[chat_id]
        type_print = callback.data
        user.price_print = price_print
        user.type_print = type_print

    def inline_plus(self, callback, num):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        markup.add(a7)
        return markup

    def inline_plus_kanc(self, callback, num):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–ù–∞–∑–∞–¥–í–∫–∞–Ω—Ü')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        markup.add(a7)
        return markup

    def plus(self, callback, num):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        return markup

    def plus_kanc(self, callback, num):
        markup = types.InlineKeyboardMarkup()
        a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
        a2 = types.InlineKeyboardButton(str(num), callback_data='jr')
        a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='–ù–∞–∑–∞–¥–í–∫–∞–Ω—Ü')
        a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data='–∫–æ—Ä–∑–∏–Ω–∞')
        a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
        markup.add(a1, a2, a3)
        markup.add(a4, a5)
        markup.add(a6)
        return markup

    def add_knopka(self, id, thumb_url, title, price):
        r1 = types.InlineQueryResultArticle(
            id=id,
            thumb_url=thumb_url,
            title=title,
            description=f'–¶–µ–Ω–∞ {price} ‚ÇΩ',
            input_message_content=types.InputTextMessageContent(message_text=f"{title}\n\n–¶–µ–Ω–∞ {price} ‚ÇΩ"
                                                                             f"[\xa0]({thumb_url})"
                                                                , parse_mode='Markdown'),
            reply_markup=mark_up.num_copy_markup3()
        )
        return r1

    def kanc_finish(self, atr):
        r = []
        n_keys = dict2[atr].keys()
        for key1 in n_keys:
            a = dict2[atr].get(key1)
            d = mark_up.add_knopka(
                a['id'], a['thumb_url'], a['title'], a['price']
            )
            r.append(d)
        return r
    
    def finish_payments(self, chat_id, user):
        number = str(mark_up.random_pool())
        j = mark_up.result_ship(chat_id, 1)
        m = mark_up.result_ship(chat_id, 0)
        from_chat_id = -1001302729558
        now = datetime.now()
        hours = int(now.hour) + 7
        time_order = str(f"{now.year}-{now.month}-{now.day}  {str(hours)}:{now.minute}")
        type_pay = '–ü–µ—Ä–µ–≤–æ–¥ –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏'
        name = user.info_user
        bot.edit_message_text(chat_id=chat_id, message_id=user.message_id,
                          text=f'–°—É–ø–µ—Ä! –ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {str(user.total_price)} –ø–æ–ª—É—á–µ–Ω!‚úî\n–¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ö–æ–ø–∏—Ä-–∫–æ—Ç!‚úî\n'
                           f'\nüíæ {j} ‚ÇΩ\n\n–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–æ –∞–¥—Ä–µ—Å—É: –ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞ 80–∞, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (–¢–¶ –ê–í–ï–ù–Æ, 4 —ç—Ç–∞–∂)\n\n'
                           f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - {number}', reply_markup=mark_up.forward())
        bot.send_message(from_chat_id, f'{m}'
                                   f'___________________________\n\n'
                                   f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {number}\n'
                                   f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {time_order}\n'
                                   f'–ó–∞–∫–∞–∑—á–∏–∫: {name}\n'
                                   f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {type_pay}\n\n'
                                   f'–ò—Ç–æ–≥–æ: {str(user.total_price)} ‚ÇΩ.'
                     )
        mark_up.clear_basket(chat_id)
        
    def pechat(self, a, price_print, callback):
                chat_id = callback.from_user.id
                user = user_dict[chat_id]
                mark_up.callduty(price_print, callback)
                num = user.num
                print(num)
                if num != 1:
                    markup = mark_up.num_copy_markup2(callback, num)
                else:
                    markup = mark_up.num_copy_markup1()
                if callback.inline_message_id == None:
                    bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                      text=f'üìå {a} - {str(price_print)} —Ä—É–±/—Å—Ç—Ä.\n\n'
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
                else:
                    bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                          text=f'üìå {a} - {str(price_print)} —Ä—É–±/—Å—Ç—Ä.\n\n'
                                      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
                    
    def forward(self):
        markup = types.InlineKeyboardMarkup(True)
        markup.add(types.InlineKeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", switch_inline_query='https://t.me/copykotbot')
        return markup
        
    

mark_up = Markup('ok')

@bot.message_handler(commands=['start', 'reset'])
def handle_start(message):
    user_markup1 = telebot.types.ReplyKeyboardMarkup(True, True)
    user_markup1.row('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª', 'üõí –ö–æ—Ä–∑–∏–Ω–∞')
    user_markup1.row('üìå –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è', 'üì≤ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    name = message.from_user.first_name
    dbworker.set_state(str(message.chat.id), '1')
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {name}! –Ø –ö–æ–ø–∏—Ä-–∫–æ—Ç!\n\n–£ –Ω–∞—Å —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\nüîπ –ß/–ë –∫–æ–ø–∏–∏/—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –ê4 - 2,5 —Ä—É–±/—Å—Ç—Ä.'
                                        f'\nüîπ –ê4 –ß/–ë –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è - 4 —Ä—É–±/—Å—Ç—Ä.\nüîπ –°–∫–∞–Ω - 2 —Ä—É–±/—Å—Ç—Ä.\nüîπ –¶–≤–µ—Ç–Ω–∞—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –ê4 - 20 —Ä—É–±/—Å—Ç—Ä.\n'
                                      f'üîπ –ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15 - 10 —Ä—É–±/—Ñ–æ—Ç–æ.'
                                      f'\nüîπ –ü–µ—á–∞—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–±—É–º–∞–≥–µ –ê4 (–≥–ª—è–Ω–µ—Ü, –º–∞—Ç–æ–≤–∞—è) - 30 —Ä—É–±/—Å—Ç—Ä.'
                                      f'\nüîπ –ö—É–ø–∏—Ç—å –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é.\n\n–ó–∞—Ö–æ–¥–∏ –≤ –¢–¶ –ê–í–ï–ù–Æ –Ω–∞ 4 —ç—Ç–∞–∂!',
                     reply_markup=user_markup1)



@bot.message_handler(func=lambda message: dbworker.get_current_state(str(message.chat.id)) == 'kanc')
def msg_apps(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.type_print = '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è'
        for y in dict_price.keys():
            if y in message.text:
                user.file_name = y
                user.price_print = dict_price.get(y)
            else:
                pass
        dbworker.set_state(str(chat_id), '1')
    except Exception as e:
        print(e)


@bot.message_handler(func=lambda message: dbworker.get_current_state(str(message.chat.id)) == 'change')
def msg_apps(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        with shelve.open('itog.py') as db:
            lst3 = list(db.keys())
            keys = list((filter(lambda x: str(message.from_user.id) in x, lst3)))
            for dd in keys:
                a = list(db.get(dd))
                if message.text in a[0]:
                    num = a[2]
                    link = a[5]
                    if a[3] == ' - ':
                        num_page = '1'
                    else:
                        num_page = (a[3])[:-4]
                    user.file_name = a[0]
                    user.price_print = (float(a[4]) / (float(num[:-4]) * float(num_page)))
                    user.link = link[2:-2]
                    user.type_print = a[1]
                    user.num = int(num[0])
                else:
                    pass
        dbworker.set_state(str(chat_id), '1')
    except Exception as e:
        print(e)

@bot.message_handler(func=lambda message: dbworker.get_current_state(str(message.chat.id)) == '2')
def msg_apps(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.apps = message.text
        bot.reply_to(message, '–î–æ–±–∞–≤–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Ñ–∞–π–ª—É', reply_markup=mark_up.go_basket())
        dbworker.set_state(str(chat_id), '1')
    except Exception as e:
        print(e)



@bot.message_handler(content_types=['text', 'document', 'photo'])
def msg_hand(message):
    try:
        chat_id = message.from_user.id
        start = 'ok'
        user = User(start)
        user_dict[chat_id] = user
        user.info_user = f'{message.from_user.first_name} {message.from_user.last_name} @{message.from_user.username}'
        num = 1
        user.num = num
        if message.text == 'üìå –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
            bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é ..', reply_markup=mark_up.kancel())
            user.type_print = '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è'
        if message.text == 'üì≤ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
            bot.send_contact(chat_id, phone_number=89039206886, first_name='–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞')
            bot.send_location(chat_id, 56.012386, 92.8707427)
            bot.send_message(chat_id, '–ê–¥—Ä–µ—Å: –ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞ 80–∞, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (–¢–¶ –ê–í–ï–ù–Æ, 4 —ç—Ç–∞–∂)\n'
                                       '–ü–Ω - –°–± 10:00 - 19:00\n–í—Å - –≤—ã—Ö–æ–¥–Ω–æ–π')
        if message.content_type == 'photo':
            file_id = (message.json).get('photo')[0].get('file_id')
            user.file_id = file_id
            file_info = bot.get_file(file_id)
            link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'
            user.link = link
            file_name = file_id[:10] + '.png'
            user.file_name = file_name
            bot.send_message(message.chat.id, '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–π–ª:\n\n'
                                                f'üíæ {file_name}'
                                              '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=mark_up.inline_markup())
        if message.content_type == 'document':
            file_id = message.document.file_id
            user.file_id = file_id
            file_info = bot.get_file(file_id)
            link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'
            user.link = link
            file_name = message.document.file_name
            user.file_name = file_name
            if file_name.endswith('.ppt') or file_name.endswith('.doc') or file_name.endswith('.xls'):
                bot.send_message(message.from_user.id,
                                 '‚ùó–¢–∞–∫–∏–µ —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã  -  .doc,  .xls,  .ppt.‚ùó\n\n'
                                 f'üíæ {file_name}\n\n'
                                 '‚ùó–ù–µ —Å–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö'
                                 ' —Å—Ç–æ–∏–º–æ—Å—Ç—å‚ùó\n–ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–Ω–∏–º–∞—é –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞ 0‚ùó\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                 '‚úîpdf, docx, pptx, xlsx\n‚úîfrw, cdw, dwg\n‚úîpng, jpeg'
                                 '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=mark_up.inline_markup())
            else:
                bot.send_message(message.chat.id,  '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–π–ª:\n\n'
                                                   f'üíæ {file_name}\n\n'
                                                   '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=mark_up.inline_markup())
        if 'http' in message.text:
            if 'no_preview' or 'psv4.userapi.com' in message.text:
                url = message.text
                result = urllib.request.urlopen(url)
                file_name = os.path.basename(urllib.parse.urlparse(result.url).path)
                user.file_name = file_name
                user.link = url
                if file_name.endswith('.ppt') or file_name.endswith('.doc') or file_name.endswith('.xls'):
                    bot.send_message(message.from_user.id,
                                     '‚ùó–¢–∞–∫–∏–µ —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã  -  .doc,  .xls,  .ppt.‚ùó\n\n'
                                    f'üíæ {file_name}\n\n'
                                    '‚ùó–ù–µ —Å–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö'
                                    ' —Å—Ç–æ–∏–º–æ—Å—Ç—å‚ùó\n–ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–Ω–∏–º–∞—é –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞ 0‚ùó\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                    '‚úîpdf, docx, pptx, xlsx\n‚úîfrw, cdw, dwg\n‚úîpng, jpeg'
                                    '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=mark_up.inline_markup())
                else:
                    bot.send_message(message.chat.id, '–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ñ–∞–π–ª:\n\n'
                                                        f'üíæ {file_name}\n\n'
                                                      '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', reply_markup=mark_up.inline_markup())
            else:
                bot.reply_to(message, '‚ùó–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫—É —è —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–µ —Å–º–æ–≥—É - –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ‚ùó\n\n'
                                      '–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–æ–∫ –∏–∑ VK:\n\n'
                                      'üìé https://vk.com/doc81064057_483314359?hash=406d1e781b028f5265&dl=HAYTANRUGA2TO:'
                                      '1544379753:9642c332b34e71d369&api=1&no_preview=1\n\n'
                                      'üìé https://psv4.userapi.com/c848036/u81064057/docs/d16/3bc44478b397/Skhema_Kriolita.pdf'
                                      '?extra=P2VMpQXtPHssvjwo2YAeVlvWK86Ox-cjjWcM3yJDZlb1eMN-EpsOJ8gh3yFbFkHeisDyZXP'
                                      '-Yci9uxQqf2IpI6fcSUZAhw02RKOfVvGAbEEmCLsG4_PGgCChuAhqArcnrySY_2kgDI9Y32_XuD6Kjkg',
                             reply_markup=mark_up.inline_markup2())
        if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª':
            bot.send_message(chat_id,
                             text=
                                    '‚ùó–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å‚ùó\n\n'
                                    '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                    '‚úîpdf, docx, pptx, xlsx\n‚úîfrw, cdw, dwg\n‚úîpng, jpeg')
        if message.text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
            mark_up.check_basket(chat_id, callback=message)
    except Exception as e:
        print(e)
        if e == 'HTTP Error 404: Not Found':
            bot.reply_to(message, '–û–π, –æ—à–∏–±–∫–∞‚ùó\n–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–µ–ª –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∏–Ω—É—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –ø–æ-–¥—Ä—É–≥–æ–º—É')
        bot.send_message(481077652, str(e))



@bot.inline_handler(func=lambda query: True)
def inline_query(query):
    try:
        chat_id = query.from_user.id
        user = user_dict[chat_id]
        dbworker.set_state(str(chat_id), 'kanc')
        if query.query == '–†—É—á–∫–∏/–ö–∞—Ä–∞–Ω–¥–∞—à–∏':
            r = mark_up.kanc_finish(atr='pens')
            bot.answer_inline_query(query.id, r, cache_time=0, is_personal=True)
        if query.query == '–ü–∞–ø–∫–∏ –∏ –§–∞–π–ª—ã':
            r = mark_up.kanc_finish(atr='files')
            bot.answer_inline_query(query.id, r, cache_time=0, is_personal=True)
        if query.query == '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞':
            r = mark_up.kanc_finish(atr='corection')
            bot.answer_inline_query(query.id, r, cache_time=0, is_personal=True)
        if query.query == '–ò–∑–º–µ–Ω–∏—Ç—å':
            with shelve.open('itog.py') as db:
                r = []
                lst3 = list(db.keys())
                keys = list((filter(lambda x: str(query.from_user.id) in x, lst3)))
                for dd in keys:
                    a = list(db.get(dd))
                    default = 'https://pp.userapi.com/c845218/v845218058/cd929/DMHxsJvNO6s.jpg'
                    num = a[2]
                    markup = types.InlineKeyboardMarkup()
                    a1 = types.InlineKeyboardButton("-", callback_data=u'-1')
                    a2 = types.InlineKeyboardButton(str(num[:-4]), callback_data='jr')
                    a3 = types.InlineKeyboardButton("+", callback_data=u'+1')
                    if a[1] == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–ù–∞–∑–∞–¥–í–∫–∞–Ω—Ü')
                    else:
                        a4 = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=u'–Ω–∞–∑–∞–¥1')
                    a5 = types.InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data=u'–∫–æ—Ä–∑–∏–Ω–∞')
                    a6 = types.InlineKeyboardButton("üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=u'–ø—Ä–∏–º–µ—á–∞–Ω–∏—è')
                    a7 = types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data=u'—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é')
                    markup.add(a1, a2, a3)
                    markup.add(a4, a5)
                    markup.add(a6)
                    markup.add(a7)
                    input_content = types.InputTextMessageContent(message_text=f"{a[0]}\n\n")
                    r2 = types.InlineQueryResultArticle(id=a[0],
                                                        thumb_url=default, title=a[0],
                                                        description=f'{a[1]}\n{a[2]}\n{a[4]} ‚ÇΩ',
                                                        input_message_content=input_content, reply_markup=markup)
                    r.append(r2)
                dbworker.set_state(str(chat_id), 'change')
                bot.answer_inline_query(query.id, r, cache_time=0, is_personal=True)
    except Exception as e:
        print(e)








@bot.callback_query_handler(func=lambda call: call == '+1' or '-1')
def callback_query_handler(callback):
    try:
        if callback:
            chat_id = callback.from_user.id
            user = user_dict[chat_id]
            num = user.num
            if callback.data == '—É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é':
                if callback.inline_message_id == None:
                    bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', reply_markup
                                         =mark_up.inline_markup2())
                else:
                    bot.edit_message_text(inline_message_id=callback.inline_message_id, text='–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
                with shelve.open('user_db.py') as db:
                    del db[str(chat_id) + ':' + user.file_name]
                mark_up.check_basket(chat_id, callback)
            if callback.data == '+1':
                num += 1
                user.num = num
                if callback.inline_message_id == None:
                    markup = mark_up.plus(callback, num)
                    bot.edit_message_reply_markup(callback.from_user.id, callback.message.message_id, reply_markup=markup)
                else:
                    if user.type_print == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                        markup = mark_up.inline_plus_kanc(callback, num)
                    else:
                        markup = mark_up.inline_plus(callback, num)
                    bot.edit_message_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=markup)
            if callback.data == '-1':
                num -= 1
                if num < 1:
                    num = 1
                if callback.inline_message_id == None:
                    markup = mark_up.plus(callback, num)
                    bot.edit_message_reply_markup(callback.from_user.id, callback.message.message_id, reply_markup=markup)
                else:
                    if user.type_print == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                        markup = mark_up.inline_plus_kanc(callback, num)
                    else:
                        markup = mark_up.inline_plus(callback, num)
                    bot.edit_message_reply_markup(inline_message_id=callback.inline_message_id, reply_markup=markup)
                user.num = num
            if callback.data == '–Ω–∞–∑–∞–¥1':
                if callback.inline_message_id == None:
                    if user.type_print == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                        markup = mark_up.kancel()
                    else:
                        markup = mark_up.inline_markup()
                    bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n\n'
                                               f'üíæ {user.file_name}',
                                          reply_markup=markup)
                else:
                    bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n\n'
                                               f'üíæ {user.file_name}',
                                          reply_markup=mark_up.inline_markup())
            if callback.data == '–ù–∞–∑–∞–¥–í–∫–∞–Ω—Ü':
                if callback.inline_message_id == None:
                    bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é ..',
                                      reply_markup=mark_up.kancel())
                else:
                    bot.send_message(chat_id,
                                     text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—é ..',
                                     reply_markup=mark_up.kancel())
            if callback.data == '–∫–æ—Ä–∑–∏–Ω–∞':
                file_name = (user.file_name).lower()
                url = user.link
                if user.type_print != '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                    urllib2.urlretrieve(url, file_name)
                elif user.type_print == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                    mark_up.add_kancel(callback)
                if file_name.endswith('.docx'):
                    document = Document(file_name)
                    document.save(f'{file_name}1.docx')
                    document.save(f'{file_name}1.zip')
                    zf = zipfile.ZipFile(f'{file_name}1.zip')
                    f = zf.open('docProps/app.xml').read()
                    soup = BeautifulSoup(f, 'xml')
                    num_page = soup.find('Pages').next_element
                    user.num_page = int(num_page)
                    mark_up.gg_basket(callback)
                if file_name.endswith('.pdf'):
                    input1 = PdfFileReader(open(file_name, "rb"))
                    num_page = input1.getNumPages()
                    user.num_page = int(num_page)
                    mark_up.gg_basket(callback)
                format1 = ['.frw', '.cdw', '.png', 'jpeg', '.dwg', '.dwt' '.gif', '.txt', '.mp4', '.jpg']
                for y in format1:
                    if y == file_name[-4:]:
                        num_page = 1
                        user.num_page = num_page
                        mark_up.gg_basket(callback)
                    else:
                        pass
                if file_name.endswith('.doc'):
                    num_page = 0
                    user.num_page = num_page
                    mark_up.gg_basket(callback)
                if file_name.endswith('.pptx'):
                    filename = os.path.abspath(file_name)
                    np = Presentation(filename)
                    num_page = len(np.slides)
                    user.num_page = int(num_page)
                    mark_up.gg_basket(callback)
                if file_name.endswith('.xlsx'):
                    xl = pd.ExcelFile(os.path.abspath(file_name))
                    num_page = len(xl.sheet_names)
                    user.num_page = int(num_page)
                    mark_up.gg_basket(callback)
                with shelve.open('itog.py') as db:
                    l = []
                    s = []
                    r = []
                    lst3 = list(db.keys())
                    lst = list((filter(lambda x: str(chat_id) in x, lst3)))
                    for dd in lst:
                        a = db.get(dd)
                        r.append(a)
                    for line3 in r:
                        line2 = ' '.join(line3[:5])
                        lin = line3[4]
                        s.append(float(lin))
                        l.append(line2)
                    total_price = sum(s)
                m = ' ‚ÇΩ\n\nüíæ '.join(l)
                user.total_price = total_price
                if callback.inline_message_id == None:
                    bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id, text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                                                                                    f'üíæ {m} ‚ÇΩ.\n\n'
                                                                                                    f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.',
                                      reply_markup=mark_up.gen_markup2())
                else:
                    bot.send_message(chat_id,
                                          text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ :\n\n'
                                               f'üíæ {m} ‚ÇΩ.\n\n'
                                               f'–ò—Ç–æ–≥–æ: {str(total_price)}  ‚ÇΩ.',
                                          reply_markup=mark_up.gen_markup2())
            if callback.data == '–ø—Ä–∏–º–µ—á–∞–Ω–∏—è':
                if callback.inline_message_id == None:
                    bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='–ò–¥—ë–º –¥–∞–ª—å—à–µ! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É ..\n\n'
                                           f'üíæ {user.file_name}', reply_markup=mark_up.back())
                else:
                    bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                          text='–ò–¥—ë–º –¥–∞–ª—å—à–µ! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É ..\n\n'
                                               f'üíæ {user.file_name}', reply_markup=mark_up.back())
                dbworker.set_state(str(chat_id), '2')
            if callback.data == '–æ—Ñ–æ—Ä–º–∏—Ç—å':
                markup = mark_up.gen_markup1(chat_id, total_price=user.total_price)
                user.message_id = callback.message.message_id
                bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó\n–ï—Å–ª–∏ –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü '
                                           '–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"\n\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã ..', reply_markup=markup)
            if callback.data == '–æ—á–∏—Å—Ç–∏—Ç—å':
                mark_up.clear_basket(chat_id)
                bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!', reply_markup=mark_up.inline_markup2())
            if callback.data == '–¥–æ–±–∞–≤–∏—Ç—å':
                num = 1
                user.num = num
                bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='‚ùó–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å‚ùó\n\n'
                                 '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                                 '‚úîpdf, docx, pptx, xlsx\n‚úîfrw, cdw, dwg\n‚úîpng, jpeg')
            if callback.data == '–Ω–∞–∑–∞–¥':
                dbworker.set_state(str(chat_id), '1')
                if callback.inline_message_id == None:
                    if user.type_print == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                        markup = mark_up.plus_kanc(callback, num)
                    else:
                        markup = mark_up.plus(callback, num)
                    bot.edit_message_text(chat_id=chat_id, message_id=callback.message.message_id,
                                      text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
                else:
                    if user.type_print == '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è':
                        markup = mark_up.inline_plus_kanc(callback, num)
                    else:
                        markup = mark_up.inline_plus(callback, num)
                    bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                          text='–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
            if callback.data == '–ß/–ë –ü–µ—á–∞—Ç—å(—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞)':
                mark_up.pechat(a='–ß/–ë –∫–æ–ø–∏–∏/—Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –ê4', price_print=2.5, callback=callback)
            if callback.data == '–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15':
                mark_up.pechat(a='–ü–µ—á–∞—Ç—å —Ñ–æ—Ç–æ 10—Ö15', price_print=10.0, callback=callback)
            if callback.data == '–¶–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –ê4':
                mark_up.pechat(a='–¶–≤–µ—Ç–Ω–∞—è —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ –ê4', price_print=20.0, callback=callback)
            if callback.data == '–ê4 –ß/–ë –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è':
                price_print = 2.0
                mark_up.callduty(price_print, callback)
                num = user.num
                if num != 1:
                    markup = mark_up.num_copy_markup2(callback, num)
                else:
                    markup = mark_up.num_copy_markup1()
                if callback.inline_message_id == None:
                    bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                      text='üìå –ê4 –ß/–ë –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è - 4 —Ä—É–±/—Å—Ç—Ä.\n\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
                else:
                    bot.edit_message_text(inline_message_id=callback.inline_message_id,
                                          text='üìå –ê4 –ß/–ë –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è - 4 —Ä—É–±/—Å—Ç—Ä.\n\n'
                                               '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π:', reply_markup=markup)
            if callback.data == '–ü–µ—á–∞—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–±—É–º–∞–≥–µ':
                mark_up.pechat(a='–ü–µ—á–∞—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–±—É–º–∞–≥–µ –ê4 (–≥–ª—è–Ω–µ—Ü, –º–∞—Ç–æ–≤–∞—è)', price_print=30.0, callback=callback)
            if callback.data == "later":
                number = f'{mark_up.random_pool()}'
                bot.answer_callback_query(callback.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ - –ü–æ —Ñ–∞–∫—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è")
                j = mark_up.result_ship(chat_id, 1)
                m = mark_up.result_ship(chat_id, 0)
                now = datetime.now()
                today = datetime.today().strftime('%H:%M')
                time_order = f"{now.year}-{now.month}-{now.day}  {today}"
                from_chat_id = -1001302729558
                type_pay = '–ü–æ —Ñ–∞–∫—Ç—É –ø–æ–ª—É—á–µ–Ω–∏—è'
                name = f'{callback.from_user.first_name} {callback.from_user.last_name} @{callback.from_user.username}'
                bot.edit_message_text(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                      text=f'–°—É–ø–µ—Ä!‚úî\n–¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {str(user.total_price)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ö–æ–ø–∏—Ä-–∫–æ—Ç—É!'
                        f'‚úî\n\nüíæ {j} ‚ÇΩ\n\n–ó–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–æ –∞–¥—Ä–µ—Å—É: –ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞ 80–∞, –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫ (–¢–¶ –ê–í–ï–ù–Æ, 4 —ç—Ç–∞–∂)\n\n'
                        f'–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - {number}', reply_markup=mark_up.forward())
                bot.send_message(from_chat_id, f'{m}'
                                               f'______________________________\n\n'
                                               f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {number}\n'
                                               f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {time_order}\n'
                                               f'–ó–∞–∫–∞–∑—á–∏–∫: {name}\n'
                                               f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {type_pay}\n\n'
                                               f'–ò—Ç–æ–≥–æ: {str(user.total_price)} —Ä—É–±.'
                                 )
                mark_up.clear_basket(chat_id)
    except KeyError as a:
        print(a)
        chat_id = callback.from_user.id
        bot.send_message(chat_id,
                         text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å\n\n'
                              '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Ñ–æ—Ä–º–∞—Ç—ã:\n\n'
                              '‚úîpdf, docx, pptx, xlsx\n‚úîfrw, cdw, dwg\n‚úîpng, jpeg')
        bot.send_message(481077652, str(a))
    except Exception as e:
        print(e)
        chat_id = callback.from_user.id
        if e == 'expected string or bytes-like object' or chat_id:
            mark_up.check_basket(chat_id, callback)
        bot.send_message(481077652, str(e))




"""
@bot.shipping_query_handler(func=lambda query: True)
def shipping(shipping_query):
    bot.answer_shipping_query(shipping_query.id, ok=True, shipping_options=False,
                              error_message='Oh, —à—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ!')


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π"
                                                " –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –ø–æ–∑–∂–µ.")


@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    chat_id = message.chat.id
    user = user_dict[chat_id]
    number = str(mark_up.random_pool())
    bot.send_message(message.from_user.id, '–°—É–ø–µ—Ä! –¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - ' + number)
    mark_up.result_ship(chat_id)
    from_chat_id = -1001302729558
    now = datetime.now()
    hours = int(now.hour) + 7
    time_order = str(f"{now.year}-{now.month}-{now.day}  {str(hours)}:{now.minute}")
    type_pay = '–ù–∞–ª–∏—á–Ω—ã–µ'
    name = f'{message.from_user.first_name} {message.from_user.last_name} @{message.from_user.username}'
    bot.edit_message_text(chat_id=message.from_user.id, message_id=message.message_id,
                          text=f'–°—É–ø–µ—Ä!‚úî\n–¢–µ–ø–µ—Ä—å –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úî\n\nüíæ {j} ‚ÇΩ\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - {number}')
    bot.send_message(from_chat_id, f'{m}'
                                   f'___________________________\n\n'
                                   f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {number}\n'
                                   f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {time_order}\n'
                                   f'–ó–∞–∫–∞–∑—á–∏–∫: {name}\n'
                                   f'–¢–∏–ø –æ–ø–ª–∞—Ç—ã: {type_pay}\n\n'
                                   f'–ò—Ç–æ–≥–æ: {str(user.total_price)} ‚ÇΩ.'
                     )
    mark_up.clear_basket(chat_id)
"""

@server.route('/' + TOKEN, methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "OK", 200

@server.route('/' + 'PAYMENTS', methods=['POST'])
def Check_Payments():
    chat_id = int(request.form['label'])
    user = user_dict[chat_id]
    total_price1 = float(request.form['amount'])
    total_price2 = (float(user.total_price) * 0.98)
    if total_price1 == total_price2:
        mark_up.finish_payments(chat_id, user)
    return "HTTP 200 OK", 200
    
     

@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://flask-est-1996.herokuapp.com/' + TOKEN)
    return "!", 200


if __name__ == "__main__":
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
